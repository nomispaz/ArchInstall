* Set environment
Set Keyboard-layout to german
#+BEGIN_SRC bash :tangle 0_set_ environment.sh
loadkeys de-latin1
#+END_SRC

* Activate WLAN and connect to SSID
- replace passphrase with password
- replace SSID with SSID-Name
#+BEGIN_SRC bash :tangle 1_activate_WLAN.sh
iwctl --passphrase passphrase station name connect SSID
#+END_SRC

* Prepare drives
- Show devices
#+BEGIN_SRC bash :tangle 2_prepare_drives.sh
lsblk -l
#+END_SRC

- Set install drive
#+BEGIN_SRC bash :tangle 2_prepare_drives.sh
echo "set install drive to: "
read installDrive
#+END_SRC

- Run parted with selected drive
#+BEGIN_SRC bash :tangle 2_prepare_drives.sh
parted /dev/$installedDrive
#+END_SRC

- Afterwards select efi and root partition
#+BEGIN_SRC bash :tangle 2_prepare_drives.sh
lsblk -l

echo "set EFI drive to: "
read efiDrive

echo "set root drive to: "
read rootDrive
#+END_SRC

- Mount root drive and create subvolumes
#+BEGIN_SRC bash :tangle 2_prepare_drives.sh
echo "mount installDrive to /mnt"
mount -o noatime,compress=zstd /dev/$rootDrive /mnt

echo "create subvolumes"
btrfs subvolume create /mnt/root
btrfs subvolume create /mnt/home
btrfs subvolume create /mnt/data
btrfs subvolume create /mnt/snapshots
btrfs subvolume create /mnt/var_log
btrfs subvolume create /mnt/var_cache

echo "subolume for swap-file"
btrfs subvolume create /mnt/swap

echo "unmount installDrive"
umount /mnt

echo "mount subvolumes"
mount -o noatime,compress=zstd,subvol=root /dev/$rootDrive /mnt
mount --mkdir -o noatime,compress=zstd,subvol=home /dev/$rootDrive /mnt/home
mount --mkdir -o noatime,compress=zstd,subvol=data /dev/$rootDrive /mnt/data
mount --mkdir -o noatime,compress=zstd,subvol=snapshots /dev/$rootDrive /mnt/.snapshots
mount --mkdir -o noatime,compress=zstd,subvol=var_log /dev/$rootDrive /mnt/var/log
mount --mkdir -o noatime,compress=zstd,subvol=var_cache /dev/$rootDrive /mnt/var/cache

echo "mount and create swap-partition and file"
mount --mkdir -o noatime,compress=zstd,subvol=swap /dev/$rootDrive /mnt/swap
btrfs filesystem mkswapfile --size 4g --uuid clear /swap/swapfile
swapon /swap/swapfile

mount --mkdir /dev/$efiDrive /mnt/boot/efi
#+END_SRC

* Install software (part 1)
** Basis system and kernel
#+BEGIN_SRC bash :padline no :tangle 3_install_basicsystem.sh
pacstrap /mnt \
base \
base-devel \
btrfs-progs \
efibootmgr \
linux \
linux-firmware \
linux-headers \
archlinux-keyring \
pacman-contrib \
sudo \
grub \
dracut \
os-prober \
#+END_SRC

** Some basic drivers
#+BEGIN_SRC bash :padline no :tangle 3_install_basicsystem.sh
xf86-input-synaptics \
amd-ucode \
#+END_SRC

** Networking stuff
#+BEGIN_SRC bash :padline no :tangle 3_install_basicsystem.sh
openssh \
iwd \
networkmanager \
wireless_tools \
wpa_supplicant \
smartmontools \
#+END_SRC

** Basic desktop programs
#+BEGIN_SRC bash :padline no :tangle 3_install_basicsystem.sh
neovim \
htop \
git \
grep \
xdg-utils \
xdg-user-dirs \
wget \
blueman \
alacritty \
snapper \
firefox \
#+END_SRC

** Pipewire
#+BEGIN_SRC bash :padline no :tangle 3_install_basicsystem.sh
pipewire \
pipewire-alsa \
pipewire-jack \
pipewire-pulse \
gst-plugin-pipewire \
libpulse \
wireplumber \
#+END_SRC

** Security
#+BEGIN_SRC bash :padline no :tangle 3_install_basicsystem.sh
apparmor \
clamav \
rkhunter \
#+END_SRC
** how to continue:
#+BEGIN_SRC bash :tangle 3_install_basicsystem.sh
genfstab -U /mnt > /mnt/etc/fstab
cp *.sh /mnt

echo "Next steps: Enter chroot. After that, run chmod +x <script>.sh to continue"
#+END_SRC
* Setup environment and variables
** Time
#+BEGIN_SRC bash :tangle 4_setup_environment.sh
echo "set locales and time"

ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
timedatectl set-timezone Europe/Berlin
timedatectl set-ntp true
#+END_SRC
** Language
#+BEGIN_SRC bash :tangle 4_setup_environment.sh
echo "LANG=en_US.UTF-8" >> /etc/locale.conf
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
echo "de_DE.UTF-8 UTF-8" >> /etc/locale.gen
echo "KEYMAP=de-latin1" >> /etc/vconsole.conf
echo "XMGneo15Arch" >> /etc/hostname
locale-gen
#+END_SRC
** Add multilib repository to pacman
#+BEGIN_SRC bash :tangle 4_setup_environment.sh
echo "add multilib repository"
echo "[multilib]" | tee -a /etc/pacman.conf
echo "Include = /etc/pacman.d/mirrorlist" | tee -a /etc/pacman.conf
#+END_SRC
** harden installation (according to hints from lynis)
#+BEGIN_SRC bash :tangle 4_setup_environment.sh
echo "harden installation"
echo "KRNL-5820 disable coredumps"
mkdir -p /etc/systemd/coredump.conf.d/
echo "[Coredump]" | tee -a /etc/systemd/coredump.conf.d/custom.conf
echo "Storage=none" | tee -a /etc/systemd/coredump.conf.d/custom.conf
echo "* hard core 0" | tee -a /etc/security/limits.conf
echo "* hard core 0" | tee -a /etc/security/limits.conf

echo "Improve password hash quality"
sed -i 's/#SHA_CRYPT_MIN_ROUNDS 5000/SHA_CRYPT_MIN_ROUNDS 500000/g' /etc/login.defs 
sed -i 's/#SHA_CRYPT_MAX_ROUNDS 5000/SHA_CRYPT_MAX_ROUNDS 500000/g' /etc/login.defs

echo "predefine host-file for localhost"
echo "127.0.0.1 localhost" | tee -a /etc/hosts
echo "127.0.0.1 XMGneo15Arch" | tee -a /etc/hosts
#+END_SRC
** clone my git-repository to add scripts and hooks
#+BEGIN_SRC bash 4_setup_environment.sh
echo "clone nomispaz ArchInstall git-repository"
git clone https://github.com/nomispaz/ArchInstall
cd ArchInstall

echo "setup dracut hooks"
cp -r etc/* /etc/
cp -r usr/* /usr/
chmod +x /usr/local/bin/dracut-install.sh
chmod +x /usr/local/bin/dracut-remove.sh
#+END_SRC
** reinstall kernel to trigger dracut with installed hooks
#+BEGIN_SRC bash :tangel 4_setup_environment.sh
echo "trigger dracut for kernels"
for kernel in /usr/lib/modules/*
do
v_kernel=$(basename "$kernel")
echo $v_kernel
dracut /boot/initramfs-linux.img --force --kver $v_kernel
dracut /boot/initramfs-linux-zen.img --force --kver $v_kernel
done
#+END_SRC
** configure grub
#+BEGIN_SRC lang
echo "install grub"
grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ArchLinux

#echo "add nvidia-drm.modeset=1 and uncomment GRUB_DISABLE_OS_PROBER
echo 'GRUB_DISABLE_OS_PROBER="false"' >> /etc/default/grub

echo "set kernel parameter"
sed -i 's/quiet/quiet mitigations=auto security=apparmor amd_pstate=passive nvidia_drm.modeset=1/g' /etc/default/grub

echo "generate grub"
grub-mkconfig -o /boot/grub/grub.cfg
#+END_SRC
* Install software (part 2)
** desktop environment gnome
#+BEGIN_SRC bash :tangle 5_install_desktop_gnome.sh
pacman -Syu --noconfirm --needed gnome
#+END_SRC
** desktop environment kde
#+BEGIN_SRC bash :tangle 5_install_desktop_kde.sh
pacman -Syu --noconfirm --needed \
plasma-meta \
dolphin \
plasma-workspace \
egl-wayland
#+END_SRC
** nvidia-drivers (nvidia-open)
#+BEGIN_SRC bash :tangle 6_install_nvidia.sh
pacman -Syu --noconfirm --needed \
nvidia-open \
nvidia-utils \
nvidia-settings \
nvidia-prime \
lib32-nvidia-utils
#+END_SRC

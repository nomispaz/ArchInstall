* Set environment
Set Keyboard-layout to german
#+BEGIN_SRC bash :tangle 0_set_ environment.sh
loadkeys de-latin1
#+END_SRC

* Activate WLAN and connect to SSID
- replace passphrase with password
- replace SSID with SSID-Name
#+BEGIN_SRC bash :tangle 1_activate_WLAN.sh
iwctl --passphrase passphrase station name connect SSID
#+END_SRC

* Prepare drives

- IMPORTANT NOTE:
  - uncomment the sections that should be used

- Show devices
#+BEGIN_SRC bash :tangle 2_prepare_drives.sh
lsblk -l
#+END_SRC

- Set install drive
#+BEGIN_SRC bash :tangle 2_prepare_drives.sh
echo "set install drive to: "
read installDrive
#+END_SRC

- Run parted with selected drive
#+BEGIN_SRC bash :tangle 2_prepare_drives.sh
#echo "Create partition table (only do this if no partition table exists!)"
#parted /dev/$installDrive mklabel gpt

#echo "Create partitions"
#parted /dev/$installDrive mkpart primary fat32 3MB 515MB
#parted /dev/$installDrive mkpart primary btrfs 2563MB 100%
#+END_SRC

- Afterwards select efi and root partition
#+BEGIN_SRC bash :tangle 2_prepare_drives.sh
lsblk -l

echo "set EFI drive to: "
read efiDrive

echo "set root drive to: "
read rootDrive
#+END_SRC
- And format if necessary
#+BEGIN_SRC bash :tangle 2_prepare_drives.sh
#echo "format partitions"
#mkfs.vfat -F 32 /dev/$efiDrive
#mkfs.btrfs /dev/$rootDrive
#+END_SRC
- Mount root drive and create subvolumes
#+BEGIN_SRC bash :tangle 2_prepare_drives.sh
echo "mount installDrive to /mnt"
mount -o noatime,compress=zstd /dev/$rootDrive /mnt

#echo "create subvolumes"
#btrfs subvolume create /mnt/root
#btrfs subvolume create /mnt/home
#btrfs subvolume create /mnt/data
#btrfs subvolume create /mnt/snapshots
#btrfs subvolume create /mnt/var_log
#btrfs subvolume create /mnt/var_cache

#echo "subolume for swap-file"
#btrfs subvolume create /mnt/swap

echo "unmount installDrive"
umount /mnt

echo "mount subvolumes"
mount -o noatime,compress=zstd,subvol=root /dev/$rootDrive /mnt
mount --mkdir -o noatime,compress=zstd,subvol=home /dev/$rootDrive /mnt/home
mount --mkdir -o noatime,compress=zstd,subvol=data /dev/$rootDrive /mnt/data
mount --mkdir -o noatime,compress=zstd,subvol=snapshots /dev/$rootDrive /mnt/.snapshots
mount --mkdir -o noatime,compress=zstd,subvol=var_log /dev/$rootDrive /mnt/var/log
mount --mkdir -o noatime,compress=zstd,subvol=var_cache /dev/$rootDrive /mnt/var/cache

echo "mount and create swap-partition and file"
mount --mkdir -o noatime,compress=zstd,subvol=swap /dev/$rootDrive /mnt/swap
btrfs filesystem mkswapfile --size 4g --uuid clear /mnt/swap/swapfile
swapon /mnt/swap/swapfile

mount --mkdir /dev/$efiDrive /mnt/boot/efi
#+END_SRC

* Install software (part 1)
** Basis system and kernel
#+BEGIN_SRC bash :padline no :tangle 3_install_basicsystem.sh
pacstrap /mnt \
base \
base-devel \
btrfs-progs \
efibootmgr \
linux \
linux-firmware \
linux-headers \
archlinux-keyring \
pacman-contrib \
sudo \
grub \
dracut \
os-prober
#+END_SRC

** Some basic drivers
#+BEGIN_SRC bash :padline no :tangle 3_install_basicsystem.sh
pacstrap /mnt \
xf86-input-synaptics \
amd-ucode
#+END_SRC

** Networking stuff
#+BEGIN_SRC bash :padline no :tangle 3_install_basicsystem.sh
pacstrap /mnt \
openssh \
iwd \
networkmanager \
wireless_tools \
wpa_supplicant \
smartmontools
#+END_SRC

** Basic desktop programs
#+BEGIN_SRC bash :padline no :tangle 3_install_basicsystem.sh
pacstrap /mnt \
neovim \
htop \
git \
grep \
xdg-utils \
xdg-user-dirs \
wget \
blueman \
alacritty \
fish \
snapper \
firefox 
#+END_SRC

** Pipewire
#+BEGIN_SRC bash :padline no :tangle 3_install_basicsystem.sh
pacstrap /mnt \
pipewire \
pipewire-alsa \
pipewire-jack \
pipewire-pulse \
gst-plugin-pipewire \
libpulse \
wireplumber
#+END_SRC

** Security
#+BEGIN_SRC bash :padline no :tangle 3_install_basicsystem.sh
pacstrap /mnt \
apparmor \
clamav \
firewalld \
rkhunter
#+END_SRC
** how to continue:
#+BEGIN_SRC bash :tangle 3_install_basicsystem.sh
genfstab -U /mnt > /mnt/etc/fstab
cp *.sh /mnt

echo "Next steps: Enter chroot. After that, run chmod +x <script>.sh to continue"
#+END_SRC
* Setup environment and variables
** Time
#+BEGIN_SRC bash :tangle 4_setup_environment.sh
echo "set locales and time"

ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
#timedatectl set-timezone Europe/Berlin
#timedatectl set-ntp true
#+END_SRC
** Language
#+BEGIN_SRC bash :tangle 4_setup_environment.sh
echo "LANG=en_US.UTF-8" >> /etc/locale.conf
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
echo "de_DE.UTF-8 UTF-8" >> /etc/locale.gen
echo "KEYMAP=de-latin1" >> /etc/vconsole.conf
echo "XMGneo15Arch" >> /etc/hostname
locale-gen
#+END_SRC
** Add multilib repository to pacman
#+BEGIN_SRC bash :tangle 4_setup_environment.sh
echo "add multilib repository"
echo "[multilib]" | tee -a /etc/pacman.conf
echo "Include = /etc/pacman.d/mirrorlist" | tee -a /etc/pacman.conf
#+END_SRC
** harden installation (according to hints from lynis)
#+BEGIN_SRC bash :tangle 4_setup_environment.sh
echo "harden installation"
echo "KRNL-5820 disable coredumps"
mkdir -p /etc/systemd/coredump.conf.d/
echo "[Coredump]" | tee -a /etc/systemd/coredump.conf.d/custom.conf
echo "Storage=none" | tee -a /etc/systemd/coredump.conf.d/custom.conf
echo "* hard core 0" | tee -a /etc/security/limits.conf
echo "* hard core 0" | tee -a /etc/security/limits.conf

echo "Improve password hash quality"
sed -i 's/#SHA_CRYPT_MIN_ROUNDS 5000/SHA_CRYPT_MIN_ROUNDS 500000/g' /etc/login.defs 
sed -i 's/#SHA_CRYPT_MAX_ROUNDS 5000/SHA_CRYPT_MAX_ROUNDS 500000/g' /etc/login.defs

echo "predefine host-file for localhost"
echo "127.0.0.1 localhost" | tee -a /etc/hosts
echo "127.0.0.1 XMGneo15Arch" | tee -a /etc/hosts
#+END_SRC
** clone my git-repository to add scripts and hooks
#+BEGIN_SRC bash :tangle 4_setup_environment.sh
echo "clone nomispaz ArchInstall git-repository"
git clone https://github.com/nomispaz/ArchInstall
cd ArchInstall

echo "setup dracut hooks"
cp -r etc/* /etc/
cp -r usr/* /usr/
chmod +x /usr/local/bin/dracut-install.sh
chmod +x /usr/local/bin/dracut-remove.sh

cd /
#+END_SRC

* Install software (part 2)
** desktop environment gnome
#+BEGIN_SRC bash :tangle 5_install_desktop_gnome.sh
pacman -Syu --noconfirm --needed gnome
#+END_SRC
** desktop environment kde
#+BEGIN_SRC bash :tangle 5_install_desktop_kde.sh
pacman -Syu --noconfirm --needed \
plasma-meta \
dolphin \
plasma-workspace \
egl-wayland \
kwrite \
konsole \
ark
#+END_SRC
** nvidia-drivers (nvidia-open)
#+BEGIN_SRC bash :tangle 6_install_nvidia.sh
pacman -Syu --noconfirm --needed \
nvidia-open \
nvidia-utils \
nvidia-settings \
nvidia-prime \
lib32-nvidia-utils
#+END_SRC
** install various programs
#+BEGIN_SRC bash :tangle 7_additional_programs.sh
pacman -Syu --noconfirm --needed \
calibre \
clipgrab \
discord \
keepassxc \
obs-studio \
thunderbird \
veracrypt \
vlc \
flatpak \
testdisk \
screenfetch \
meld
#+END_SRC
** Install gaming tools
#+BEGIN_SRC bash :tangle 8_gaming.sh
echo "Install gaming-tools"
pacman -Syu --noconfirm --needed \
vulkan-icd-loader \
lib32-vulkan-icd-loader \
gamescope \
gamemode \
steam \
wine \
lib32-gnutls \
wine-mono \
wine-gecko \
winetricks \
mangohud
#+END_SRC
** Qemu and libvirt
#+BEGIN_SRC bash :tangle 9_qemu_libvirt.sh
pacman -Syu --noconfirm --needed \
virt-manager \
qemu \
edk2-ovmf \
bridge-utils \
dnsmasq
#+END_SRC
** Enable services
#+BEGIN_SRC bash :tangle 10_finish_installation.sh
echo "enable services"
systemctl enable NetworkManager.service
systemctl enable bluetooth.service
systemctl enable cups.service
systemctl enable avahi-daemon.service
systemctl enable libvirtd.service
systemctl enable firewalld.service
systemctl enable acpid.service
systemctl enable sddm.service
systemctl enable apparmor.service
systemctl enable clamav-daemon.service
systemctl enable nvidia-powerd.service
systemctl enable chronyd.service
systemctl enable clamav-freshclam.service
#+END_SRC
** Set firewall to block
#+BEGIN_SRC bash :tangle 10_finish_installation.sh
firewall-cmd --set-default-zone block
#+END_SRC

** generate kernel img and install grub
- reinstall kernel to trigger dracut with installed hooks
#+BEGIN_SRC bash :tangle 10_finish_installation.sh
pacman -Syu --noconfirm --needed linux
#+END_SRC
*** configure grub
- IMPORTANT NOTE:
  - uncomment the sections that should be used

#+BEGIN_SRC bash :tangle 10_finish_installation.sh
echo "install grub"
grub-install --target=x86_64-efi --efi-directory=/boot/efi

#echo "add nvidia-drm.modeset=1 and uncomment GRUB_DISABLE_OS_PROBER
echo 'GRUB_DISABLE_OS_PROBER=false' >> /etc/default/grub

echo "set kernel parameter"
sed -i 's/quiet/quiet loglevel=3 mitigations=auto security=apparmor amd_pstate=passive nvidia_drm.modeset=1/g' /etc/default/grub

echo "generate grub"
grub-mkconfig -o /boot/grub/grub.cfg
#+END_SRC

** Create users and passwords
#+BEGIN_SRC bash :tangle 10_finish_installation.sh
echo "set root password"
passwd

echo "create user and set password"
echo "Enter username: "
read user
useradd -m --create-home $user
usermod -aG sys,wheel,users,rfkill,$user,libvirt $user
passwd $user

echo "Defaults targetpw # Ask for the password of the target user" >> /etc/sudoers
echo "%wheel ALL=(ALL:ALL) ALL" >> /etc/sudoers
#+END_SRC

** Install personal dotfiles
#+BEGIN_SRC bash :tangle 10_finish_installation.sh

# change user from root to normal user
su $user

git clone https://github.com/nomispaz/dotfiles /home/$user/dotfiles
cd /home/$user/dotfiles

# create .config dir since it doesn't exist at that point
mkdir /home/$user/.config
# loop through all folders and files
for program in $(ls -d  *)
do
  # create softlink to config folder for all folders and files unless it is the README
  if [ ! $program == 'README.md' ]; then
    ln -s ~/dotfiles/$program ~/.config/$program
  fi
done
#+END_SRC

* KDE configs
- TODOs
  - [ ] plasma-org.kde.plasma.desktop-appletsrc
  - [ ] plasmashellrc
  - [ ] powerdevilrc
#+BEGIN_SRC bash :tangle 10_finish_installation.sh
# activate numlock during startup
kwriteconfig6 --file /home/$USER/.config/kcminputrc --group Keyboard --key Numlock 0
kwriteconfig6 --file /home/$USER/.config/kcminputrc --group Keyboard --key X11LibInputXAccelProfileFlat true

# activate breeze-dark
kwriteconfig6 --file /home/$USER/.config/kdeglobals --group KDE --key LookAndFeelPackage org.kde.breezedark.desktop
kwriteconfig6 --file /home/$USER/.config/gtk-3.0/settings --group Settings --key gtk-application-prefer-dark-theme true
kwriteconfig6 --file /home/$USER/.config/gtk-3.0/settings --group Settings --key gtk-icon-theme-name breeze-dark
kwriteconfig6 --file /home/$USER/.config/gtk-4.0/settings --group Settings --key gtk-application-prefer-dark-theme true
kwriteconfig6 --file /home/$USER/.config/gtk-4.0/settings --group Settings --key gtk-icon-theme-name breeze-dark

# disable browserintegration and device-automount
kwriteconfig6 --file /home/$USER/.config/kded5rc --group Module-browserintegrationreminder --key autoload false
kwriteconfig6 --file /home/$USER/.config/kded5rc --group Module-device_automounter --key autoload false

# virtual desktops
kwriteconfig6 --file /home/$USER/.config/kwinrc --group Desktops --key Number 4
kwriteconfig6 --file /home/$USER/.config/kwinrc --group Desktops --key Rows 2

# night color
kwriteconfig6 --file /home/$USER/.config/kwinrc --group NightColor --key Active true
kwriteconfig6 --file /home/$USER/.config/kwinrc --group NightColor --key DayTemperature 5400
kwriteconfig6 --file /home/$USER/.config/kwinrc --group NightColor --key EveningBeginFixed 2130
kwriteconfig6 --file /home/$USER/.config/kwinrc --group NightColor --key Mode Times
kwriteconfig6 --file /home/$USER/.config/kwinrc --group TabBox --key ActivitesMode 0
kwriteconfig6 --file /home/$USER/.config/kwinrc --group TabBox --key LayoutName sidebar

# dolphin
kwriteconfig6 --file ~/.config/dolphinrc --group General --key ShowFullPath true

echo "Install finished. Restart and run 100_afterinstall.sh
#+END_SRC

* Afterinstall
#+BEGIN_SRC bash :tangle 100_afterinstall.sh
echo "renew clamav database"
sudo freshclam

echo "add flatpak-repo"
flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

echo "run rkhunter"
sudo rkhunter --update
sudo rkhunter --propupd
#c for check q for skip keypress
sudo rkhunter -c -sk

# configure snapper
sudo umount /.snapshots
sudo rm -r /.snapshots
sudo snapper -c root create-config /
#read UUID of rootpartition and write into variable
# in bash or konsole
set rootUUID=$(findmnt --output=UUID --noheadings --target=/root)
# in fish
set rootUUID $(findmnt --output=UUID --noheadings --target=/root)
sudo mount -o subvol=snapshots UUID=$rootUUID /.snapshots

# set firewall zone
sudo firewall-cmd --set-default-zone block
#+END_SRC
